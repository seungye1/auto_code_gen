# Number rules
(rule $num  ($PHRASE) (NumberFn))

# Plus rules
(rule $num  ($num plus $num) (lambda x (lambda y (call add (var x) (var y) ))))
(rule $num  (add $num to $num) (lambda x (lambda y (call add (var x) (var y) ))))
(rule $num  (add $num and $num) (lambda x (lambda y (call add (var x) (var y) ))))

(rule $addnum  (add $num to $num and) (lambda x (lambda y (call add (var x) (var y) ))))
(rule $addnum  (add $num and $num and) (lambda x (lambda y (call add (var x) (var y) ))))
(rule $num  ($addnum add $num to that) (lambda x (lambda y (call add (var x) (var y) ))))
(rule $num  ($addnum add $num to the result) (lambda x (lambda y (call add (var x) (var y) ))))

# Subtraction rules
(rule $num  ($num minus $num) (lambda x (lambda y (call sub (var x) (var y) ))))
(rule $num  ($num take away $num) (lambda x (lambda y (call sub (var x) (var y) ))))
(rule $num  (subtract $num from $num) (lambda x (lambda y (call sub (var y) (var x) ))))

(rule $subnum  (subtract $num from $num and) (lambda x (lambda y (call sub (var y) (var x) ))))

# Multiplication rules
(rule $num  ($num times $num) (lambda x (lambda y (call mul (var x) (var y) ))))
(rule $num  ($addnum multiply that by $num) (lambda x (lambda y (call mul (var x) (var y) ))))
(rule $num  ($subnum multiply the result by $num) (lambda x (lambda y (call mul (var x) (var y) ))))

# Root
(rule $ROOT ($num) (IdentityFn))
